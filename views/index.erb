<!doctype html>  
<html lang="en">  
<head>  
  <meta charset="utf-8">  
  <title>The HTML5 Herald</title>  
  <meta name="description" content="The HTML5 Herald">  
  <meta name="author" content="SitePoint">  
  <link rel="stylesheet" href="/css/style.css">
  <link rel="stylesheet" href="lightbox/css/jquery.lightbox-0.5.css">  
</head>  
<body> 

<!--BEGIN MAIN BLOCK CONTENT -->
<div id="main-content">
	<!--BEGIN SUB NAV LINKS-->
	<div id="sub-nav">
		<ul class="subnav">
			<li><a href="#" class="sub-link"><span data-title="INTERACT">INTERACT</span></a></li>
			<li><a href="#" class="sub-link"><span data-title="DOCS">DOCS</span></a></li>
			<li><a href="#" class="sub-link"><span data-title="DEMO">DEMO</span></a></li>		
		</ul>
	</div>
	<!--END SUB NAV LINKS-->
	<ul class="slides">
		<li class="slide demo">
			<ul class="planets">
			</ul>
		</li>
	</ul>
</div>	
<a class="logo"></a>
<a href="#" class="arrow-rt"></a>
<div id="page-holder"><a href="#" class="page-title">Demo ///</a></div>

<script src="/js/jquery-1.7.2.min.js"></script>
<script src="/js/jquery.easing.1.3.js"></script>
<script src="/js/plugin.expander.js"></script>
<script src="/js/app.js"></script>
<script src="/lightbox/js/jquery.lightbox-0.5.min.js"></script>

<script>
$(document).ready(function() {

	var image_base_dir = "https://github.com/hannorein/open_exoplanet_catalogue/raw/master/data_images/";
	var image_type = ".iPhone.png";
	// send a post request to the API to get the list of planets
  	$.ajax( 
  	{
  		url: "http://172.16.3.30:4567/api/planets/all?limit=50&sort=[discoveryyear:desc]",
  		success: function(data)
  		{
  			var d = data.response.results;
  			for(var x = 0 ; x < d.length ; x++)
  			{
  				var text = "<li class='planet'>";
  					var name = d[x].name.toString();

  					if(name.length >= 26) name = "<span style='font-size:22px;'>" + name  + "</span>";
  					else if(name.length >= 18) name = "<span style='font-size:26px;'>" + name + "</span>";


  					text += '<div class="roll-trigger">' + 
								'<div class="back-anim"></div>' + 
									'<div class="info">' + 
										'<a href="#" class="filler">' +
											'<h2>'+ name + '</h2>' + 
											'<h3>Discovered in '+d[x].discoveryyear.toString()+'</h3>' + 
										'</a>' + 
									'</div>' + 
								'<a href="#" class="close-button"></a>' + 
					'</div>';

					text += '<div class="expanded">';

					if(isEmpty(d[x].image) == false)
					{
						text += 
								'<div class="image-holder" style="width:360px; height:100px; overflow:hidden;">' + 
									'<img src="'+image_base_dir+d[x].image+image_type+'" style="width:360px;" />' + 
									'<a href="'+image_base_dir+d[x].image+image_type+'" class="expand-image" rel="prettyPhoto"></a>' +  
								'</div>';
					}

					text += '<ul class="info">';


					text += '<li><h3>Name: '+d[x].name+'</h3></li>';
					text += '<li><strong>Discovery Method:</strong> '+getValue(d[x].discoverymethod)+'</li>';
					text += '<li><strong>Mass:</strong> '+getValue(d[x].properties.mass)+'</li>';
					text += '<li><strong>Radius:</strong> '+getValue(d[x].properties.radius)+'</li>' + 
							'<li><strong>Orbit:</strong> ' + 
								'<ul>' +
									'<li>Period: '+getValue(d[x].properties.orbit.period)+'</li>' + 
									'<li>Semimajoraxis: '+getValue(d[x].properties.orbit.semimajoraxis)+'</li>' + 
									'<li>Eccentricity: '+getValue(d[x].properties.orbit.eccentricity)+'</li>' + 
									'<li>Inclination: '+getValue(d[x].properties.orbit.inclination)+'</li>' + 
								'</ul>' + 
							'</li>';

					text += '<li><strong>Star:</strong> ' +
								'<ul>' +
									'<li>Spectraltype: '+getValue(d[x].star.spectraltype)+'</li>' + 
									'<li>Mass: '+getValue(d[x].star.mass)+'</li>' + 
									'<li>Radius: '+getValue(d[x].star.radius)+'</li>' + 
									'<li>Metallicity: '+getValue(d[x].star.metallicity)+'</li>' + 
									'<li>Rightascension: '+getValue(d[x].star.rightascension)+'</li>' + 
									'<li>Declination: '+getValue(d[x].star.declination)+'</li>' + 
									'<li>Angulardistance: '+getValue(d[x].star.angulardistance)+'</li>' + 
									'<li>Distance: '+getValue(d[x].star.distance)+'</li>' + 
									'<li>magV: '+getValue(d[x].star.magV)+'</li>' + 
									'<li>magI: '+getValue(d[x].star.magI)+'</li>' + 
									'<li>magH: '+getValue(d[x].star.magH)+'</li>' + 
									'<li>magJ: '+getValue(d[x].star.magJ)+'</li>' + 
									'<li>magK: '+getValue(d[x].star.magK)+'</li>' + 
								'</ul>' + 
							'</li>';


					text += '<li><strong>Multiplicity:</strong> '+getValue(d[x].multiplicity)+'</li>' +
							'<li><strong>Discovery Year:</strong> '+getValue(d[x].discoveryyear)+'</li>' +
							'<li><strong>Last Update:</strong> '+getValue(d[x].lastupdate)+'</li>' +
							'<li><strong>Description:</strong> '+getValue(d[x].description)+'</li>' +
							'<li><strong>New:</strong>'+getValue(d[x].new)+'</li>';

					text += '</ul>';


					text += '</div>';

  				text += "</li>";

  				$("ul.planets").append(text);
  			}
  		},
  		async: false,
  		dataType: "json"
  	});


	Exo.initGlobalApp();
	$('ul.planets').expander();
	$('a.expand-image').lightBox();
});

function isEmpty(map) {
   for(var key in map) {
      if (map.hasOwnProperty(key)) 
         return false;
   }
   return true;
}

function getValue(v)
{
	return (isEmpty(v) ? "N/A" : v.toString());
}

</script>
</body>  
</html>  





